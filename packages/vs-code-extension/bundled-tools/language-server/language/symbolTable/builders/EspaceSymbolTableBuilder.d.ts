import { AbstractParseTreeVisitor } from 'antlr4ng';
import { ScopedSymbol } from 'antlr4-c3';
import { DocumentManager } from '../../../core/managers/DocumentsManager.js';
import { DocumentSymbolTable } from '../DocumentSymbolTable.js';
import { Document } from '../../../core/documents/Document.js';
import { Logger } from '../../../utils/Logger.js';
import { ESPACEVisitor, EspaceExperimentHeaderContext, EspaceExperimentBodyContext, EspaceSpaceDeclarationContext, EspaceSpaceHeaderContext, EspaceSpaceBodyContext, EspaceStrategyStatementContext, EspaceParamDefinitionContext, EspaceControlBlockContext, EspaceControlBodyContext, EspaceSimpleTransitionContext, EspaceConditionalTransitionContext, EspaceDataDefinitionContext, EspaceTaskConfigurationContext, EspaceParamAssignmentContext, EspaceWorkflowNameReadContext, EspaceTaskNameReadContext, EspaceSpaceNameReadContext } from '@extremexp/core';
export declare class EspaceSymbolTableBuilder extends AbstractParseTreeVisitor<DocumentSymbolTable> implements ESPACEVisitor<DocumentSymbolTable> {
    readonly documentsManager: DocumentManager;
    readonly document: Document;
    readonly symbolTable: DocumentSymbolTable;
    readonly logger: Logger;
    currentScope: ScopedSymbol;
    private readonly experimentVisitor;
    private readonly spaceVisitor;
    private readonly paramVisitor;
    private readonly controlVisitor;
    private readonly dataVisitor;
    private readonly taskConfigurationVisitor;
    private readonly variableReadVisitor;
    constructor(documentsManager: DocumentManager, document: Document, symbolTable: DocumentSymbolTable);
    defaultResult(): DocumentSymbolTable;
    visitExperimentHeader(ctx: EspaceExperimentHeaderContext): DocumentSymbolTable;
    visitExperimentBody(ctx: EspaceExperimentBodyContext): DocumentSymbolTable;
    visitSpaceDeclaration(ctx: EspaceSpaceDeclarationContext): DocumentSymbolTable;
    visitSpaceHeader(ctx: EspaceSpaceHeaderContext): DocumentSymbolTable;
    visitSpaceBody(ctx: EspaceSpaceBodyContext): DocumentSymbolTable;
    visitStrategyStatement(ctx: EspaceStrategyStatementContext): DocumentSymbolTable;
    visitParamDefinition(ctx: EspaceParamDefinitionContext): DocumentSymbolTable;
    visitParamAssignment(ctx: EspaceParamAssignmentContext): DocumentSymbolTable;
    visitControlBlock(ctx: EspaceControlBlockContext): DocumentSymbolTable;
    visitControlBody(ctx: EspaceControlBodyContext): DocumentSymbolTable;
    visitSimpleTransition(ctx: EspaceSimpleTransitionContext): DocumentSymbolTable;
    visitConditionalTransition(ctx: EspaceConditionalTransitionContext): DocumentSymbolTable;
    visitDataDefinition(ctx: EspaceDataDefinitionContext): DocumentSymbolTable;
    visitTaskConfiguration(ctx: EspaceTaskConfigurationContext): DocumentSymbolTable;
    visitWorkflowNameRead(ctx: EspaceWorkflowNameReadContext): DocumentSymbolTable;
    visitTaskNameRead(ctx: EspaceTaskNameReadContext): DocumentSymbolTable;
    visitSpaceNameRead(ctx: EspaceSpaceNameReadContext): DocumentSymbolTable;
}
//# sourceMappingURL=EspaceSymbolTableBuilder.d.ts.map