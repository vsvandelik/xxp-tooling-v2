import * as antlr from "antlr4ng";
export declare class XXPLexer extends antlr.Lexer {
    static readonly SEMICOLON = 1;
    static readonly ARROW = 2;
    static readonly LBRACE = 3;
    static readonly RBRACE = 4;
    static readonly EQUALS = 5;
    static readonly COMMA = 6;
    static readonly WORKFLOW = 7;
    static readonly FROM = 8;
    static readonly DATA = 9;
    static readonly DEFINE = 10;
    static readonly IMPLEMENTATION = 11;
    static readonly PARAM = 12;
    static readonly TASK = 13;
    static readonly CONFIGURE = 14;
    static readonly INPUT = 15;
    static readonly OUTPUT = 16;
    static readonly START = 17;
    static readonly END = 18;
    static readonly BOOLEAN = 19;
    static readonly IDENTIFIER = 20;
    static readonly STRING = 21;
    static readonly NUMBER = 22;
    static readonly WS = 23;
    static readonly COMMENT = 24;
    static readonly channelNames: string[];
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    constructor(input: antlr.CharStream);
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    get channelNames(): string[];
    get modeNames(): string[];
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): antlr.ATN;
    private static readonly vocabulary;
    get vocabulary(): antlr.Vocabulary;
    private static readonly decisionsToDFA;
}
//# sourceMappingURL=XXPLexer.d.ts.map