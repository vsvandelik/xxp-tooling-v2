import { ErrorNode, ParseTreeListener, ParserRuleContext, TerminalNode } from "antlr4ng";
import { ProgramContext } from "./ESPACEParser.js";
import { ExperimentDeclarationContext } from "./ESPACEParser.js";
import { ExperimentHeaderContext } from "./ESPACEParser.js";
import { ExperimentBodyContext } from "./ESPACEParser.js";
import { ExperimentContentContext } from "./ESPACEParser.js";
import { SpaceDeclarationContext } from "./ESPACEParser.js";
import { SpaceHeaderContext } from "./ESPACEParser.js";
import { SpaceBodyContext } from "./ESPACEParser.js";
import { SpaceContentContext } from "./ESPACEParser.js";
import { StrategyStatementContext } from "./ESPACEParser.js";
import { ParamDefinitionContext } from "./ESPACEParser.js";
import { ParamValueContext } from "./ESPACEParser.js";
import { EnumFunctionContext } from "./ESPACEParser.js";
import { RangeFunctionContext } from "./ESPACEParser.js";
import { TaskConfigurationContext } from "./ESPACEParser.js";
import { TaskConfigurationHeaderContext } from "./ESPACEParser.js";
import { TaskConfigurationBodyContext } from "./ESPACEParser.js";
import { ConfigurationContentContext } from "./ESPACEParser.js";
import { ParamAssignmentContext } from "./ESPACEParser.js";
import { ControlBlockContext } from "./ESPACEParser.js";
import { ControlBodyContext } from "./ESPACEParser.js";
import { ControlContentContext } from "./ESPACEParser.js";
import { SimpleTransitionContext } from "./ESPACEParser.js";
import { ConditionalTransitionContext } from "./ESPACEParser.js";
import { ConditionalTransitionHeaderContext } from "./ESPACEParser.js";
import { ConditionalTransitionBodyContext } from "./ESPACEParser.js";
import { ConditionContext } from "./ESPACEParser.js";
import { ControlChainElementContext } from "./ESPACEParser.js";
import { DataDefinitionContext } from "./ESPACEParser.js";
import { WorkflowNameReadContext } from "./ESPACEParser.js";
import { TaskNameReadContext } from "./ESPACEParser.js";
import { SpaceNameReadContext } from "./ESPACEParser.js";
import { ExpressionContext } from "./ESPACEParser.js";
export declare class ESPACEListener implements ParseTreeListener {
    enterProgram?: (ctx: ProgramContext) => void;
    exitProgram?: (ctx: ProgramContext) => void;
    enterExperimentDeclaration?: (ctx: ExperimentDeclarationContext) => void;
    exitExperimentDeclaration?: (ctx: ExperimentDeclarationContext) => void;
    enterExperimentHeader?: (ctx: ExperimentHeaderContext) => void;
    exitExperimentHeader?: (ctx: ExperimentHeaderContext) => void;
    enterExperimentBody?: (ctx: ExperimentBodyContext) => void;
    exitExperimentBody?: (ctx: ExperimentBodyContext) => void;
    enterExperimentContent?: (ctx: ExperimentContentContext) => void;
    exitExperimentContent?: (ctx: ExperimentContentContext) => void;
    enterSpaceDeclaration?: (ctx: SpaceDeclarationContext) => void;
    exitSpaceDeclaration?: (ctx: SpaceDeclarationContext) => void;
    enterSpaceHeader?: (ctx: SpaceHeaderContext) => void;
    exitSpaceHeader?: (ctx: SpaceHeaderContext) => void;
    enterSpaceBody?: (ctx: SpaceBodyContext) => void;
    exitSpaceBody?: (ctx: SpaceBodyContext) => void;
    enterSpaceContent?: (ctx: SpaceContentContext) => void;
    exitSpaceContent?: (ctx: SpaceContentContext) => void;
    enterStrategyStatement?: (ctx: StrategyStatementContext) => void;
    exitStrategyStatement?: (ctx: StrategyStatementContext) => void;
    enterParamDefinition?: (ctx: ParamDefinitionContext) => void;
    exitParamDefinition?: (ctx: ParamDefinitionContext) => void;
    enterParamValue?: (ctx: ParamValueContext) => void;
    exitParamValue?: (ctx: ParamValueContext) => void;
    enterEnumFunction?: (ctx: EnumFunctionContext) => void;
    exitEnumFunction?: (ctx: EnumFunctionContext) => void;
    enterRangeFunction?: (ctx: RangeFunctionContext) => void;
    exitRangeFunction?: (ctx: RangeFunctionContext) => void;
    enterTaskConfiguration?: (ctx: TaskConfigurationContext) => void;
    exitTaskConfiguration?: (ctx: TaskConfigurationContext) => void;
    enterTaskConfigurationHeader?: (ctx: TaskConfigurationHeaderContext) => void;
    exitTaskConfigurationHeader?: (ctx: TaskConfigurationHeaderContext) => void;
    enterTaskConfigurationBody?: (ctx: TaskConfigurationBodyContext) => void;
    exitTaskConfigurationBody?: (ctx: TaskConfigurationBodyContext) => void;
    enterConfigurationContent?: (ctx: ConfigurationContentContext) => void;
    exitConfigurationContent?: (ctx: ConfigurationContentContext) => void;
    enterParamAssignment?: (ctx: ParamAssignmentContext) => void;
    exitParamAssignment?: (ctx: ParamAssignmentContext) => void;
    enterControlBlock?: (ctx: ControlBlockContext) => void;
    exitControlBlock?: (ctx: ControlBlockContext) => void;
    enterControlBody?: (ctx: ControlBodyContext) => void;
    exitControlBody?: (ctx: ControlBodyContext) => void;
    enterControlContent?: (ctx: ControlContentContext) => void;
    exitControlContent?: (ctx: ControlContentContext) => void;
    enterSimpleTransition?: (ctx: SimpleTransitionContext) => void;
    exitSimpleTransition?: (ctx: SimpleTransitionContext) => void;
    enterConditionalTransition?: (ctx: ConditionalTransitionContext) => void;
    exitConditionalTransition?: (ctx: ConditionalTransitionContext) => void;
    enterConditionalTransitionHeader?: (ctx: ConditionalTransitionHeaderContext) => void;
    exitConditionalTransitionHeader?: (ctx: ConditionalTransitionHeaderContext) => void;
    enterConditionalTransitionBody?: (ctx: ConditionalTransitionBodyContext) => void;
    exitConditionalTransitionBody?: (ctx: ConditionalTransitionBodyContext) => void;
    enterCondition?: (ctx: ConditionContext) => void;
    exitCondition?: (ctx: ConditionContext) => void;
    enterControlChainElement?: (ctx: ControlChainElementContext) => void;
    exitControlChainElement?: (ctx: ControlChainElementContext) => void;
    enterDataDefinition?: (ctx: DataDefinitionContext) => void;
    exitDataDefinition?: (ctx: DataDefinitionContext) => void;
    enterWorkflowNameRead?: (ctx: WorkflowNameReadContext) => void;
    exitWorkflowNameRead?: (ctx: WorkflowNameReadContext) => void;
    enterTaskNameRead?: (ctx: TaskNameReadContext) => void;
    exitTaskNameRead?: (ctx: TaskNameReadContext) => void;
    enterSpaceNameRead?: (ctx: SpaceNameReadContext) => void;
    exitSpaceNameRead?: (ctx: SpaceNameReadContext) => void;
    enterExpression?: (ctx: ExpressionContext) => void;
    exitExpression?: (ctx: ExpressionContext) => void;
    visitTerminal(node: TerminalNode): void;
    visitErrorNode(node: ErrorNode): void;
    enterEveryRule(node: ParserRuleContext): void;
    exitEveryRule(node: ParserRuleContext): void;
}
//# sourceMappingURL=ESPACEListener.d.ts.map