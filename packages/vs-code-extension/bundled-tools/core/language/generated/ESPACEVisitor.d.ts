import { AbstractParseTreeVisitor } from "antlr4ng";
import { ProgramContext } from "./ESPACEParser.js";
import { ExperimentDeclarationContext } from "./ESPACEParser.js";
import { ExperimentHeaderContext } from "./ESPACEParser.js";
import { ExperimentBodyContext } from "./ESPACEParser.js";
import { ExperimentContentContext } from "./ESPACEParser.js";
import { SpaceDeclarationContext } from "./ESPACEParser.js";
import { SpaceHeaderContext } from "./ESPACEParser.js";
import { SpaceBodyContext } from "./ESPACEParser.js";
import { SpaceContentContext } from "./ESPACEParser.js";
import { StrategyStatementContext } from "./ESPACEParser.js";
import { ParamDefinitionContext } from "./ESPACEParser.js";
import { ParamValueContext } from "./ESPACEParser.js";
import { EnumFunctionContext } from "./ESPACEParser.js";
import { RangeFunctionContext } from "./ESPACEParser.js";
import { TaskConfigurationContext } from "./ESPACEParser.js";
import { TaskConfigurationHeaderContext } from "./ESPACEParser.js";
import { TaskConfigurationBodyContext } from "./ESPACEParser.js";
import { ConfigurationContentContext } from "./ESPACEParser.js";
import { ParamAssignmentContext } from "./ESPACEParser.js";
import { ControlBlockContext } from "./ESPACEParser.js";
import { ControlBodyContext } from "./ESPACEParser.js";
import { ControlContentContext } from "./ESPACEParser.js";
import { SimpleTransitionContext } from "./ESPACEParser.js";
import { ConditionalTransitionContext } from "./ESPACEParser.js";
import { ConditionalTransitionHeaderContext } from "./ESPACEParser.js";
import { ConditionalTransitionBodyContext } from "./ESPACEParser.js";
import { ConditionContext } from "./ESPACEParser.js";
import { ControlChainElementContext } from "./ESPACEParser.js";
import { DataDefinitionContext } from "./ESPACEParser.js";
import { WorkflowNameReadContext } from "./ESPACEParser.js";
import { TaskNameReadContext } from "./ESPACEParser.js";
import { SpaceNameReadContext } from "./ESPACEParser.js";
import { ExpressionContext } from "./ESPACEParser.js";
export declare class ESPACEVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    visitProgram?: (ctx: ProgramContext) => Result;
    visitExperimentDeclaration?: (ctx: ExperimentDeclarationContext) => Result;
    visitExperimentHeader?: (ctx: ExperimentHeaderContext) => Result;
    visitExperimentBody?: (ctx: ExperimentBodyContext) => Result;
    visitExperimentContent?: (ctx: ExperimentContentContext) => Result;
    visitSpaceDeclaration?: (ctx: SpaceDeclarationContext) => Result;
    visitSpaceHeader?: (ctx: SpaceHeaderContext) => Result;
    visitSpaceBody?: (ctx: SpaceBodyContext) => Result;
    visitSpaceContent?: (ctx: SpaceContentContext) => Result;
    visitStrategyStatement?: (ctx: StrategyStatementContext) => Result;
    visitParamDefinition?: (ctx: ParamDefinitionContext) => Result;
    visitParamValue?: (ctx: ParamValueContext) => Result;
    visitEnumFunction?: (ctx: EnumFunctionContext) => Result;
    visitRangeFunction?: (ctx: RangeFunctionContext) => Result;
    visitTaskConfiguration?: (ctx: TaskConfigurationContext) => Result;
    visitTaskConfigurationHeader?: (ctx: TaskConfigurationHeaderContext) => Result;
    visitTaskConfigurationBody?: (ctx: TaskConfigurationBodyContext) => Result;
    visitConfigurationContent?: (ctx: ConfigurationContentContext) => Result;
    visitParamAssignment?: (ctx: ParamAssignmentContext) => Result;
    visitControlBlock?: (ctx: ControlBlockContext) => Result;
    visitControlBody?: (ctx: ControlBodyContext) => Result;
    visitControlContent?: (ctx: ControlContentContext) => Result;
    visitSimpleTransition?: (ctx: SimpleTransitionContext) => Result;
    visitConditionalTransition?: (ctx: ConditionalTransitionContext) => Result;
    visitConditionalTransitionHeader?: (ctx: ConditionalTransitionHeaderContext) => Result;
    visitConditionalTransitionBody?: (ctx: ConditionalTransitionBodyContext) => Result;
    visitCondition?: (ctx: ConditionContext) => Result;
    visitControlChainElement?: (ctx: ControlChainElementContext) => Result;
    visitDataDefinition?: (ctx: DataDefinitionContext) => Result;
    visitWorkflowNameRead?: (ctx: WorkflowNameReadContext) => Result;
    visitTaskNameRead?: (ctx: TaskNameReadContext) => Result;
    visitSpaceNameRead?: (ctx: SpaceNameReadContext) => Result;
    visitExpression?: (ctx: ExpressionContext) => Result;
}
//# sourceMappingURL=ESPACEVisitor.d.ts.map