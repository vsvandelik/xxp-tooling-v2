import { AbstractParseTreeVisitor } from "antlr4ng";
import { ProgramContext } from "./XXPParser.js";
import { WorkflowDeclarationContext } from "./XXPParser.js";
import { WorkflowHeaderContext } from "./XXPParser.js";
import { WorkflowBodyContext } from "./XXPParser.js";
import { WorkflowContentContext } from "./XXPParser.js";
import { DataDefinitionContext } from "./XXPParser.js";
import { TaskDefinitionContext } from "./XXPParser.js";
import { TaskChainContext } from "./XXPParser.js";
import { ChainElementContext } from "./XXPParser.js";
import { TaskConfigurationContext } from "./XXPParser.js";
import { TaskConfigurationHeaderContext } from "./XXPParser.js";
import { TaskConfigurationBodyContext } from "./XXPParser.js";
import { ConfigurationContentContext } from "./XXPParser.js";
import { ImplementationContext } from "./XXPParser.js";
import { ParamAssignmentContext } from "./XXPParser.js";
import { InputStatementContext } from "./XXPParser.js";
import { OutputStatementContext } from "./XXPParser.js";
import { DataNameListContext } from "./XXPParser.js";
import { WorkflowNameReadContext } from "./XXPParser.js";
import { DataNameReadContext } from "./XXPParser.js";
import { TaskNameReadContext } from "./XXPParser.js";
import { FileNameStringContext } from "./XXPParser.js";
import { ExpressionContext } from "./XXPParser.js";
export declare class XXPVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    visitProgram?: (ctx: ProgramContext) => Result;
    visitWorkflowDeclaration?: (ctx: WorkflowDeclarationContext) => Result;
    visitWorkflowHeader?: (ctx: WorkflowHeaderContext) => Result;
    visitWorkflowBody?: (ctx: WorkflowBodyContext) => Result;
    visitWorkflowContent?: (ctx: WorkflowContentContext) => Result;
    visitDataDefinition?: (ctx: DataDefinitionContext) => Result;
    visitTaskDefinition?: (ctx: TaskDefinitionContext) => Result;
    visitTaskChain?: (ctx: TaskChainContext) => Result;
    visitChainElement?: (ctx: ChainElementContext) => Result;
    visitTaskConfiguration?: (ctx: TaskConfigurationContext) => Result;
    visitTaskConfigurationHeader?: (ctx: TaskConfigurationHeaderContext) => Result;
    visitTaskConfigurationBody?: (ctx: TaskConfigurationBodyContext) => Result;
    visitConfigurationContent?: (ctx: ConfigurationContentContext) => Result;
    visitImplementation?: (ctx: ImplementationContext) => Result;
    visitParamAssignment?: (ctx: ParamAssignmentContext) => Result;
    visitInputStatement?: (ctx: InputStatementContext) => Result;
    visitOutputStatement?: (ctx: OutputStatementContext) => Result;
    visitDataNameList?: (ctx: DataNameListContext) => Result;
    visitWorkflowNameRead?: (ctx: WorkflowNameReadContext) => Result;
    visitDataNameRead?: (ctx: DataNameReadContext) => Result;
    visitTaskNameRead?: (ctx: TaskNameReadContext) => Result;
    visitFileNameString?: (ctx: FileNameStringContext) => Result;
    visitExpression?: (ctx: ExpressionContext) => Result;
}
//# sourceMappingURL=XXPVisitor.d.ts.map