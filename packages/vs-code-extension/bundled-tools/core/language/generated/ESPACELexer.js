import * as antlr from "antlr4ng";
export class ESPACELexer extends antlr.Lexer {
    static SEMICOLON = 1;
    static ARROW = 2;
    static CONDITION_ARROW = 3;
    static LBRACE = 4;
    static RBRACE = 5;
    static LPAREN = 6;
    static RPAREN = 7;
    static EQUALS = 8;
    static COMMA = 9;
    static EXPERIMENT = 10;
    static SPACE = 11;
    static OF = 12;
    static STRATEGY = 13;
    static PARAM = 14;
    static ENUM = 15;
    static RANGE = 16;
    static CONFIGURE = 17;
    static TASK = 18;
    static CONTROL = 19;
    static CONDITION = 20;
    static DEFINE = 21;
    static DATA = 22;
    static START = 23;
    static END = 24;
    static BOOLEAN = 25;
    static IDENTIFIER = 26;
    static STRING = 27;
    static NUMBER = 28;
    static WS = 29;
    static COMMENT = 30;
    static channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];
    static literalNames = [
        null, "';'", "'->'", "'-?>'", "'{'", "'}'", "'('", "')'", "'='",
        "','", "'experiment'", "'space'", "'of'", "'strategy'", "'param'",
        "'enum'", "'range'", "'configure'", "'task'", "'control'", "'condition'",
        "'define'", "'data'", "'start'", "'end'"
    ];
    static symbolicNames = [
        null, "SEMICOLON", "ARROW", "CONDITION_ARROW", "LBRACE", "RBRACE",
        "LPAREN", "RPAREN", "EQUALS", "COMMA", "EXPERIMENT", "SPACE", "OF",
        "STRATEGY", "PARAM", "ENUM", "RANGE", "CONFIGURE", "TASK", "CONTROL",
        "CONDITION", "DEFINE", "DATA", "START", "END", "BOOLEAN", "IDENTIFIER",
        "STRING", "NUMBER", "WS", "COMMENT"
    ];
    static modeNames = [
        "DEFAULT_MODE",
    ];
    static ruleNames = [
        "SEMICOLON", "ARROW", "CONDITION_ARROW", "LBRACE", "RBRACE", "LPAREN",
        "RPAREN", "EQUALS", "COMMA", "EXPERIMENT", "SPACE", "OF", "STRATEGY",
        "PARAM", "ENUM", "RANGE", "CONFIGURE", "TASK", "CONTROL", "CONDITION",
        "DEFINE", "DATA", "START", "END", "LETTER", "DIGIT", "BOOLEAN",
        "IDENTIFIER", "STRING", "NUMBER", "WS", "COMMENT",
    ];
    constructor(input) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, ESPACELexer._ATN, ESPACELexer.decisionsToDFA, new antlr.PredictionContextCache());
    }
    get grammarFileName() { return "ESPACE.g4"; }
    get literalNames() { return ESPACELexer.literalNames; }
    get symbolicNames() { return ESPACELexer.symbolicNames; }
    get ruleNames() { return ESPACELexer.ruleNames; }
    get serializedATN() { return ESPACELexer._serializedATN; }
    get channelNames() { return ESPACELexer.channelNames; }
    get modeNames() { return ESPACELexer.modeNames; }
    static _serializedATN = [
        4, 0, 30, 250, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5,
        2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2,
        13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7,
        19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
        26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 1, 0, 1,
        0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1,
        7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1,
        10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1,
        12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1,
        14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
        16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1,
        18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
        19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1,
        21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1,
        25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 201, 8,
        26, 1, 27, 1, 27, 1, 27, 5, 27, 206, 8, 27, 10, 27, 12, 27, 209, 9, 27, 1, 28, 1, 28, 5,
        28, 213, 8, 28, 10, 28, 12, 28, 216, 9, 28, 1, 28, 1, 28, 1, 29, 4, 29, 221, 8, 29, 11,
        29, 12, 29, 222, 1, 29, 1, 29, 4, 29, 227, 8, 29, 11, 29, 12, 29, 228, 3, 29, 231, 8,
        29, 1, 30, 4, 30, 234, 8, 30, 11, 30, 12, 30, 235, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1,
        31, 5, 31, 244, 8, 31, 10, 31, 12, 31, 247, 9, 31, 1, 31, 1, 31, 0, 0, 32, 1, 1, 3, 2, 5,
        3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15,
        31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 0, 51, 0,
        53, 25, 55, 26, 57, 27, 59, 28, 61, 29, 63, 30, 1, 0, 5, 3, 0, 65, 90, 95, 95, 97, 122,
        1, 0, 48, 57, 1, 0, 34, 34, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 10, 10, 13, 13, 256, 0, 1,
        1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0,
        0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0,
        0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0,
        0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0,
        0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0,
        0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 1, 65, 1, 0,
        0, 0, 3, 67, 1, 0, 0, 0, 5, 70, 1, 0, 0, 0, 7, 74, 1, 0, 0, 0, 9, 76, 1, 0, 0, 0, 11, 78, 1,
        0, 0, 0, 13, 80, 1, 0, 0, 0, 15, 82, 1, 0, 0, 0, 17, 84, 1, 0, 0, 0, 19, 86, 1, 0, 0, 0, 21,
        97, 1, 0, 0, 0, 23, 103, 1, 0, 0, 0, 25, 106, 1, 0, 0, 0, 27, 115, 1, 0, 0, 0, 29, 121, 1,
        0, 0, 0, 31, 126, 1, 0, 0, 0, 33, 132, 1, 0, 0, 0, 35, 142, 1, 0, 0, 0, 37, 147, 1, 0, 0,
        0, 39, 155, 1, 0, 0, 0, 41, 165, 1, 0, 0, 0, 43, 172, 1, 0, 0, 0, 45, 177, 1, 0, 0, 0, 47,
        183, 1, 0, 0, 0, 49, 187, 1, 0, 0, 0, 51, 189, 1, 0, 0, 0, 53, 200, 1, 0, 0, 0, 55, 202,
        1, 0, 0, 0, 57, 210, 1, 0, 0, 0, 59, 220, 1, 0, 0, 0, 61, 233, 1, 0, 0, 0, 63, 239, 1, 0,
        0, 0, 65, 66, 5, 59, 0, 0, 66, 2, 1, 0, 0, 0, 67, 68, 5, 45, 0, 0, 68, 69, 5, 62, 0, 0, 69,
        4, 1, 0, 0, 0, 70, 71, 5, 45, 0, 0, 71, 72, 5, 63, 0, 0, 72, 73, 5, 62, 0, 0, 73, 6, 1, 0,
        0, 0, 74, 75, 5, 123, 0, 0, 75, 8, 1, 0, 0, 0, 76, 77, 5, 125, 0, 0, 77, 10, 1, 0, 0, 0, 78,
        79, 5, 40, 0, 0, 79, 12, 1, 0, 0, 0, 80, 81, 5, 41, 0, 0, 81, 14, 1, 0, 0, 0, 82, 83, 5, 61,
        0, 0, 83, 16, 1, 0, 0, 0, 84, 85, 5, 44, 0, 0, 85, 18, 1, 0, 0, 0, 86, 87, 5, 101, 0, 0, 87,
        88, 5, 120, 0, 0, 88, 89, 5, 112, 0, 0, 89, 90, 5, 101, 0, 0, 90, 91, 5, 114, 0, 0, 91,
        92, 5, 105, 0, 0, 92, 93, 5, 109, 0, 0, 93, 94, 5, 101, 0, 0, 94, 95, 5, 110, 0, 0, 95,
        96, 5, 116, 0, 0, 96, 20, 1, 0, 0, 0, 97, 98, 5, 115, 0, 0, 98, 99, 5, 112, 0, 0, 99, 100,
        5, 97, 0, 0, 100, 101, 5, 99, 0, 0, 101, 102, 5, 101, 0, 0, 102, 22, 1, 0, 0, 0, 103, 104,
        5, 111, 0, 0, 104, 105, 5, 102, 0, 0, 105, 24, 1, 0, 0, 0, 106, 107, 5, 115, 0, 0, 107,
        108, 5, 116, 0, 0, 108, 109, 5, 114, 0, 0, 109, 110, 5, 97, 0, 0, 110, 111, 5, 116, 0,
        0, 111, 112, 5, 101, 0, 0, 112, 113, 5, 103, 0, 0, 113, 114, 5, 121, 0, 0, 114, 26, 1,
        0, 0, 0, 115, 116, 5, 112, 0, 0, 116, 117, 5, 97, 0, 0, 117, 118, 5, 114, 0, 0, 118, 119,
        5, 97, 0, 0, 119, 120, 5, 109, 0, 0, 120, 28, 1, 0, 0, 0, 121, 122, 5, 101, 0, 0, 122,
        123, 5, 110, 0, 0, 123, 124, 5, 117, 0, 0, 124, 125, 5, 109, 0, 0, 125, 30, 1, 0, 0, 0,
        126, 127, 5, 114, 0, 0, 127, 128, 5, 97, 0, 0, 128, 129, 5, 110, 0, 0, 129, 130, 5, 103,
        0, 0, 130, 131, 5, 101, 0, 0, 131, 32, 1, 0, 0, 0, 132, 133, 5, 99, 0, 0, 133, 134, 5,
        111, 0, 0, 134, 135, 5, 110, 0, 0, 135, 136, 5, 102, 0, 0, 136, 137, 5, 105, 0, 0, 137,
        138, 5, 103, 0, 0, 138, 139, 5, 117, 0, 0, 139, 140, 5, 114, 0, 0, 140, 141, 5, 101,
        0, 0, 141, 34, 1, 0, 0, 0, 142, 143, 5, 116, 0, 0, 143, 144, 5, 97, 0, 0, 144, 145, 5,
        115, 0, 0, 145, 146, 5, 107, 0, 0, 146, 36, 1, 0, 0, 0, 147, 148, 5, 99, 0, 0, 148, 149,
        5, 111, 0, 0, 149, 150, 5, 110, 0, 0, 150, 151, 5, 116, 0, 0, 151, 152, 5, 114, 0, 0,
        152, 153, 5, 111, 0, 0, 153, 154, 5, 108, 0, 0, 154, 38, 1, 0, 0, 0, 155, 156, 5, 99,
        0, 0, 156, 157, 5, 111, 0, 0, 157, 158, 5, 110, 0, 0, 158, 159, 5, 100, 0, 0, 159, 160,
        5, 105, 0, 0, 160, 161, 5, 116, 0, 0, 161, 162, 5, 105, 0, 0, 162, 163, 5, 111, 0, 0,
        163, 164, 5, 110, 0, 0, 164, 40, 1, 0, 0, 0, 165, 166, 5, 100, 0, 0, 166, 167, 5, 101,
        0, 0, 167, 168, 5, 102, 0, 0, 168, 169, 5, 105, 0, 0, 169, 170, 5, 110, 0, 0, 170, 171,
        5, 101, 0, 0, 171, 42, 1, 0, 0, 0, 172, 173, 5, 100, 0, 0, 173, 174, 5, 97, 0, 0, 174,
        175, 5, 116, 0, 0, 175, 176, 5, 97, 0, 0, 176, 44, 1, 0, 0, 0, 177, 178, 5, 115, 0, 0,
        178, 179, 5, 116, 0, 0, 179, 180, 5, 97, 0, 0, 180, 181, 5, 114, 0, 0, 181, 182, 5, 116,
        0, 0, 182, 46, 1, 0, 0, 0, 183, 184, 5, 101, 0, 0, 184, 185, 5, 110, 0, 0, 185, 186, 5,
        100, 0, 0, 186, 48, 1, 0, 0, 0, 187, 188, 7, 0, 0, 0, 188, 50, 1, 0, 0, 0, 189, 190, 7,
        1, 0, 0, 190, 52, 1, 0, 0, 0, 191, 192, 5, 116, 0, 0, 192, 193, 5, 114, 0, 0, 193, 194,
        5, 117, 0, 0, 194, 201, 5, 101, 0, 0, 195, 196, 5, 102, 0, 0, 196, 197, 5, 97, 0, 0, 197,
        198, 5, 108, 0, 0, 198, 199, 5, 115, 0, 0, 199, 201, 5, 101, 0, 0, 200, 191, 1, 0, 0,
        0, 200, 195, 1, 0, 0, 0, 201, 54, 1, 0, 0, 0, 202, 207, 3, 49, 24, 0, 203, 206, 3, 49,
        24, 0, 204, 206, 3, 51, 25, 0, 205, 203, 1, 0, 0, 0, 205, 204, 1, 0, 0, 0, 206, 209, 1,
        0, 0, 0, 207, 205, 1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 56, 1, 0, 0, 0, 209, 207, 1, 0,
        0, 0, 210, 214, 5, 34, 0, 0, 211, 213, 8, 2, 0, 0, 212, 211, 1, 0, 0, 0, 213, 216, 1, 0,
        0, 0, 214, 212, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 217, 1, 0, 0, 0, 216, 214, 1, 0,
        0, 0, 217, 218, 5, 34, 0, 0, 218, 58, 1, 0, 0, 0, 219, 221, 3, 51, 25, 0, 220, 219, 1,
        0, 0, 0, 221, 222, 1, 0, 0, 0, 222, 220, 1, 0, 0, 0, 222, 223, 1, 0, 0, 0, 223, 230, 1,
        0, 0, 0, 224, 226, 5, 46, 0, 0, 225, 227, 3, 51, 25, 0, 226, 225, 1, 0, 0, 0, 227, 228,
        1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229, 231, 1, 0, 0, 0, 230, 224,
        1, 0, 0, 0, 230, 231, 1, 0, 0, 0, 231, 60, 1, 0, 0, 0, 232, 234, 7, 3, 0, 0, 233, 232, 1,
        0, 0, 0, 234, 235, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236, 237, 1,
        0, 0, 0, 237, 238, 6, 30, 0, 0, 238, 62, 1, 0, 0, 0, 239, 240, 5, 47, 0, 0, 240, 241, 5,
        47, 0, 0, 241, 245, 1, 0, 0, 0, 242, 244, 8, 4, 0, 0, 243, 242, 1, 0, 0, 0, 244, 247, 1,
        0, 0, 0, 245, 243, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 248, 1, 0, 0, 0, 247, 245, 1,
        0, 0, 0, 248, 249, 6, 31, 0, 0, 249, 64, 1, 0, 0, 0, 10, 0, 200, 205, 207, 214, 222, 228,
        230, 235, 245, 1, 0, 1, 0
    ];
    static __ATN;
    static get _ATN() {
        if (!ESPACELexer.__ATN) {
            ESPACELexer.__ATN = new antlr.ATNDeserializer().deserialize(ESPACELexer._serializedATN);
        }
        return ESPACELexer.__ATN;
    }
    static vocabulary = new antlr.Vocabulary(ESPACELexer.literalNames, ESPACELexer.symbolicNames, []);
    get vocabulary() {
        return ESPACELexer.vocabulary;
    }
    static decisionsToDFA = ESPACELexer._ATN.decisionToState.map((ds, index) => new antlr.DFA(ds, index));
}
//# sourceMappingURL=ESPACELexer.js.map