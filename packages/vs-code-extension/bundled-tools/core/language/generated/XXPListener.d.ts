import { ErrorNode, ParseTreeListener, ParserRuleContext, TerminalNode } from "antlr4ng";
import { ProgramContext } from "./XXPParser.js";
import { WorkflowDeclarationContext } from "./XXPParser.js";
import { WorkflowHeaderContext } from "./XXPParser.js";
import { WorkflowBodyContext } from "./XXPParser.js";
import { WorkflowContentContext } from "./XXPParser.js";
import { DataDefinitionContext } from "./XXPParser.js";
import { TaskDefinitionContext } from "./XXPParser.js";
import { TaskChainContext } from "./XXPParser.js";
import { ChainElementContext } from "./XXPParser.js";
import { TaskConfigurationContext } from "./XXPParser.js";
import { TaskConfigurationHeaderContext } from "./XXPParser.js";
import { TaskConfigurationBodyContext } from "./XXPParser.js";
import { ConfigurationContentContext } from "./XXPParser.js";
import { ImplementationContext } from "./XXPParser.js";
import { ParamAssignmentContext } from "./XXPParser.js";
import { InputStatementContext } from "./XXPParser.js";
import { OutputStatementContext } from "./XXPParser.js";
import { DataNameListContext } from "./XXPParser.js";
import { WorkflowNameReadContext } from "./XXPParser.js";
import { DataNameReadContext } from "./XXPParser.js";
import { TaskNameReadContext } from "./XXPParser.js";
import { FileNameStringContext } from "./XXPParser.js";
import { ExpressionContext } from "./XXPParser.js";
export declare class XXPListener implements ParseTreeListener {
    enterProgram?: (ctx: ProgramContext) => void;
    exitProgram?: (ctx: ProgramContext) => void;
    enterWorkflowDeclaration?: (ctx: WorkflowDeclarationContext) => void;
    exitWorkflowDeclaration?: (ctx: WorkflowDeclarationContext) => void;
    enterWorkflowHeader?: (ctx: WorkflowHeaderContext) => void;
    exitWorkflowHeader?: (ctx: WorkflowHeaderContext) => void;
    enterWorkflowBody?: (ctx: WorkflowBodyContext) => void;
    exitWorkflowBody?: (ctx: WorkflowBodyContext) => void;
    enterWorkflowContent?: (ctx: WorkflowContentContext) => void;
    exitWorkflowContent?: (ctx: WorkflowContentContext) => void;
    enterDataDefinition?: (ctx: DataDefinitionContext) => void;
    exitDataDefinition?: (ctx: DataDefinitionContext) => void;
    enterTaskDefinition?: (ctx: TaskDefinitionContext) => void;
    exitTaskDefinition?: (ctx: TaskDefinitionContext) => void;
    enterTaskChain?: (ctx: TaskChainContext) => void;
    exitTaskChain?: (ctx: TaskChainContext) => void;
    enterChainElement?: (ctx: ChainElementContext) => void;
    exitChainElement?: (ctx: ChainElementContext) => void;
    enterTaskConfiguration?: (ctx: TaskConfigurationContext) => void;
    exitTaskConfiguration?: (ctx: TaskConfigurationContext) => void;
    enterTaskConfigurationHeader?: (ctx: TaskConfigurationHeaderContext) => void;
    exitTaskConfigurationHeader?: (ctx: TaskConfigurationHeaderContext) => void;
    enterTaskConfigurationBody?: (ctx: TaskConfigurationBodyContext) => void;
    exitTaskConfigurationBody?: (ctx: TaskConfigurationBodyContext) => void;
    enterConfigurationContent?: (ctx: ConfigurationContentContext) => void;
    exitConfigurationContent?: (ctx: ConfigurationContentContext) => void;
    enterImplementation?: (ctx: ImplementationContext) => void;
    exitImplementation?: (ctx: ImplementationContext) => void;
    enterParamAssignment?: (ctx: ParamAssignmentContext) => void;
    exitParamAssignment?: (ctx: ParamAssignmentContext) => void;
    enterInputStatement?: (ctx: InputStatementContext) => void;
    exitInputStatement?: (ctx: InputStatementContext) => void;
    enterOutputStatement?: (ctx: OutputStatementContext) => void;
    exitOutputStatement?: (ctx: OutputStatementContext) => void;
    enterDataNameList?: (ctx: DataNameListContext) => void;
    exitDataNameList?: (ctx: DataNameListContext) => void;
    enterWorkflowNameRead?: (ctx: WorkflowNameReadContext) => void;
    exitWorkflowNameRead?: (ctx: WorkflowNameReadContext) => void;
    enterDataNameRead?: (ctx: DataNameReadContext) => void;
    exitDataNameRead?: (ctx: DataNameReadContext) => void;
    enterTaskNameRead?: (ctx: TaskNameReadContext) => void;
    exitTaskNameRead?: (ctx: TaskNameReadContext) => void;
    enterFileNameString?: (ctx: FileNameStringContext) => void;
    exitFileNameString?: (ctx: FileNameStringContext) => void;
    enterExpression?: (ctx: ExpressionContext) => void;
    exitExpression?: (ctx: ExpressionContext) => void;
    visitTerminal(node: TerminalNode): void;
    visitErrorNode(node: ErrorNode): void;
    enterEveryRule(node: ParserRuleContext): void;
    exitEveryRule(node: ParserRuleContext): void;
}
//# sourceMappingURL=XXPListener.d.ts.map