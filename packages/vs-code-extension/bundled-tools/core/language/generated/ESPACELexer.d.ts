import * as antlr from "antlr4ng";
export declare class ESPACELexer extends antlr.Lexer {
    static readonly SEMICOLON = 1;
    static readonly ARROW = 2;
    static readonly CONDITION_ARROW = 3;
    static readonly LBRACE = 4;
    static readonly RBRACE = 5;
    static readonly LPAREN = 6;
    static readonly RPAREN = 7;
    static readonly EQUALS = 8;
    static readonly COMMA = 9;
    static readonly EXPERIMENT = 10;
    static readonly SPACE = 11;
    static readonly OF = 12;
    static readonly STRATEGY = 13;
    static readonly PARAM = 14;
    static readonly ENUM = 15;
    static readonly RANGE = 16;
    static readonly CONFIGURE = 17;
    static readonly TASK = 18;
    static readonly CONTROL = 19;
    static readonly CONDITION = 20;
    static readonly DEFINE = 21;
    static readonly DATA = 22;
    static readonly START = 23;
    static readonly END = 24;
    static readonly BOOLEAN = 25;
    static readonly IDENTIFIER = 26;
    static readonly STRING = 27;
    static readonly NUMBER = 28;
    static readonly WS = 29;
    static readonly COMMENT = 30;
    static readonly channelNames: string[];
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    constructor(input: antlr.CharStream);
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    get channelNames(): string[];
    get modeNames(): string[];
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): antlr.ATN;
    private static readonly vocabulary;
    get vocabulary(): antlr.Vocabulary;
    private static readonly decisionsToDFA;
}
//# sourceMappingURL=ESPACELexer.d.ts.map