{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "xxp",
  "patterns": [
    {
      "include": "#strings"
    },
    {
      "include": "#decorators"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#connections"
    },
    {
      "include": "#workflowDefinition"
    },
    {
      "include": "#implementations"
    },
    {
      "include": "#inputOutput"
    },
    {
      "include": "#package"
    },
    {
      "include": "#punctuationSemicolon"
    },
    {
      "include": "#punctuationBraces"
    },
    {
      "include": "#punctuationComma"
    },
    {
      "include": "#params"
    },
    {
      "include": "#numericConstants"
    },
    {
      "include": "#groups"
    },
    {
      "include": "#data"
    },
    {
      "include": "#variablesDefinition"
    }
  ],
  "repository": {
    "strings": {
      "name": "string.quoted.double.xxp",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.xxp",
          "match": "\\\\."
        }
      ]
    },
    "decorators": {
      "patterns": [
        {
          "match": "\\@\\w+",
          "name": "variable.function.decorator.xxp"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.xxp",
          "match": "//.*"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.xxp"
        }
      ]
    },
    "variablesDefinition": {
      "patterns": [
        {
          "match": "(define|configure)\\s(task|data)\\s(\\w+)",
          "captures": {
            "1": {
              "name": "keyword.xxp"
            },
            "2": {
              "name": "storage.type.xxp"
            },
            "3": {
              "name": "variable.other.xxp"
            }
          }
        },
        {
          "match": "\\b(\\w+)\\b",
          "name": "variable.other.xxp"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(START|END)\\b",
          "name": "constant.language.xxp"
        },
        {
          "match": "\\b(condition|schema|from|input|output)\\b",
          "name": "keyword.other.xxp"
        }
      ]
    },
    "connections": {
      "patterns": [
        {
          "match": "\\b\\w+(?=\\s*(->|\\?->|-->))",
          "name": "variable.other.xxp"
        },
        {
          "match": "(?<=->)\\s*(END)",
          "captures": {
            "1": {
              "name": "constant.language.xxp"
            }
          }
        },
        {
          "match": "(?<=->)\\s*(\\w+)",
          "captures": {
            "1": {
              "name": "variable.other.xxp"
            }
          }
        },
        {
          "match": "(->|\\?->|-->)",
          "name": "keyword.operator.connection.xxp"
        }
      ]
    },
    "workflowDefinition": {
      "patterns": [
        {
          "match": "\\b(workflow)\\s(\\w+)(?:\\s+(from)\\s+(\\w+))?",
          "captures": {
            "1": {
              "name": "storage.type.workflow.xxp"
            },
            "2": {
              "name": "entity.name.type.workflow.xxp"
            },
            "3": {
              "name": "keyword.other.xxp"
            },
            "4": {
              "name": "entity.name.type.workflow.xxp"
            }
          }
        }
      ]
    },
    "implementations": {
      "patterns": [
        {
          "match": "\\b(implementation)\\s+(\"[^\"]*\")",
          "captures": {
            "1": {
              "name": "storage.type.implementation.xxp"
            },
            "2": {
              "name": "string.quoted.double.xxp"
            }
          }
        },
        {
          "match": "\\b(implementation)\\b",
          "name": "storage.type.implementation.xxp"
        }
      ]
    },
    "inputOutput": {
      "patterns": [
        {
          "match": "\\b(input|output)\\s+([\\w,\\s]+)\\s*;",
          "captures": {
            "1": {
              "name": "keyword.other.xxp"
            },
            "2": {
              "name": "variable.other.xxp"
            }
          }
        }
      ]
    },
    "package": {
      "patterns": [
        {
          "match": "\\b(package)\\s(\\w+)\\s*;",
          "captures": {
            "1": {
              "name": "storage.type.namespace.xxp"
            },
            "2": {
              "name": "entity.name.type.namespace.xxp"
            }
          }
        }
      ]
    },
    "punctuationSemicolon": {
      "patterns": [
        {
          "match": ";",
          "name": "punctuation.terminator.statement.xxp"
        }
      ]
    },
    "punctuationBraces": {
      "patterns": [
        {
          "match": "[{}]",
          "name": "punctuation.section.block.xxp"
        }
      ]
    },
    "punctuationComma": {
      "patterns": [
        {
          "match": ",",
          "name": "punctuation.separator.comma.xxp"
        }
      ]
    },
    "params": {
      "patterns": [
        {
          "match": "\\b(param)\\s+(\\w+)\\s*(=)",
          "captures": {
            "1": {
              "name": "keyword.other.xxp"
            },
            "2": {
              "name": "variable.parameter.xxp"
            },
            "3": {
              "name": "keyword.operator.xxp"
            }
          }
        },
        {
          "match": "\\b(param)\\s+(\\w+)\\s*;",
          "captures": {
            "1": {
              "name": "keyword.other.xxp"
            },
            "2": {
              "name": "variable.parameter.xxp"
            }
          }
        }
      ]
    },
    "numericConstants": {
      "patterns": [
        {
          "match": "\\b(\\d+(\\.\\d+)?)\\b",
          "name": "constant.numeric.xxp"
        }
      ]
    },
    "groups": {
      "patterns": [
        {
          "match": "\\b(group)\\s+(\\w+)\\b",
          "captures": {
            "1": {
              "name": "storage.type.group.xxp"
            },
            "2": {
              "name": "entity.name.type.group.xxp"
            }
          }
        }
      ]
    },
    "data": {
      "patterns": [
        {
          "match": "\\b(data)\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "storage.type.data.xxp"
            },
            "2": {
              "name": "entity.name.type.data.xxp"
            }
          }
        }
      ]
    }
  },
  "scopeName": "source.xxp"
}