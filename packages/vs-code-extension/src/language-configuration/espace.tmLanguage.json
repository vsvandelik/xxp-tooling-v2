{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "espace",
  "patterns": [
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#experimentDefinition"
    },
    {
      "include": "#spaceDefinition"
    },
    {
      "include": "#controlBlock"
    },
    {
      "include": "#strategyStatement"
    },
    {
      "include": "#transitions"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#taskConfiguration"
    },
    {
      "include": "#dataDefinition"
    },
    {
      "include": "#paramDefinition"
    },
    {
      "include": "#conditionStatement"
    },
    {
      "include": "#punctuationSemicolon"
    },
    {
      "include": "#punctuationBraces"
    },
    {
      "include": "#punctuationParens"
    },
    {
      "include": "#punctuationComma"
    },
    {
      "include": "#numericConstants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "strings": {
      "name": "string.quoted.double.espace",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.espace",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.espace",
          "match": "//.*"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.espace"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(start|end)\\b",
          "name": "constant.language.espace"
        },
        {
          "match": "\\b(of|strategy|param|enum|range|configure|task|control|condition|define|data)\\b",
          "name": "keyword.other.espace"
        }
      ]
    },
    "experimentDefinition": {
      "patterns": [
        {
          "match": "\\b(experiment)\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "storage.type.experiment.espace"
            },
            "2": {
              "name": "entity.name.type.experiment.espace"
            }
          }
        }
      ]
    },
    "spaceDefinition": {
      "patterns": [
        {
          "match": "\\b(space)\\s+(\\w+)\\s+(of)\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "storage.type.space.espace"
            },
            "2": {
              "name": "entity.name.type.space.espace"
            },
            "3": {
              "name": "keyword.other.espace"
            },
            "4": {
              "name": "entity.name.type.workflow.espace"
            }
          }
        }
      ]
    },
    "controlBlock": {
      "patterns": [
        {
          "match": "\\b(control)\\b",
          "name": "storage.type.control.espace"
        }
      ]
    },
    "strategyStatement": {
      "patterns": [
        {
          "match": "\\b(strategy)\\s+(\\w+)\\s*;",
          "captures": {
            "1": {
              "name": "keyword.other.espace"
            },
            "2": {
              "name": "entity.name.type.strategy.espace"
            }
          }
        }
      ]
    },
    "transitions": {
      "patterns": [
        {
          "match": "\\b\\w+(?=\\s*(-\\?>|->))",
          "name": "variable.other.espace"
        },
        {
          "match": "(?<=(-\\?>|->))\\s*(end)",
          "captures": {
            "2": {
              "name": "constant.language.espace"
            }
          }
        },
        {
          "match": "(?<=(-\\?>|->))\\s*(\\w+)",
          "captures": {
            "2": {
              "name": "variable.other.espace"
            }
          }
        },
        {
          "match": "(-\\?>|->)",
          "name": "keyword.operator.transition.espace"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\b(enum|range)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.espace"
            }
          }
        }
      ]
    },
    "taskConfiguration": {
      "patterns": [
        {
          "match": "\\b(configure)\\s+(task)\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "keyword.other.espace"
            },
            "2": {
              "name": "storage.type.espace"
            },
            "3": {
              "name": "variable.other.espace"
            }
          }
        }
      ]
    },
    "dataDefinition": {
      "patterns": [
        {
          "match": "\\b(define)\\s+(data)\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "keyword.other.espace"
            },
            "2": {
              "name": "storage.type.data.espace"
            },
            "3": {
              "name": "entity.name.type.data.espace"
            }
          }
        }
      ]
    },
    "paramDefinition": {
      "patterns": [
        {
          "match": "\\b(param)\\s+(\\w+)\\s*(=)",
          "captures": {
            "1": {
              "name": "keyword.other.espace"
            },
            "2": {
              "name": "variable.parameter.espace"
            },
            "3": {
              "name": "keyword.operator.espace"
            }
          }
        }
      ]
    },
    "conditionStatement": {
      "patterns": [
        {
          "match": "\\b(condition)\\s+(\"[^\"]*\")\\s*;",
          "captures": {
            "1": {
              "name": "keyword.other.espace"
            },
            "2": {
              "name": "string.quoted.double.espace"
            }
          }
        }
      ]
    },
    "punctuationSemicolon": {
      "patterns": [
        {
          "match": ";",
          "name": "punctuation.terminator.statement.espace"
        }
      ]
    },
    "punctuationBraces": {
      "patterns": [
        {
          "match": "[{}]",
          "name": "punctuation.section.block.espace"
        }
      ]
    },
    "punctuationParens": {
      "patterns": [
        {
          "match": "[()]",
          "name": "punctuation.section.group.espace"
        }
      ]
    },
    "punctuationComma": {
      "patterns": [
        {
          "match": ",",
          "name": "punctuation.separator.comma.espace"
        }
      ]1
    },
    "numericConstants": {
      "patterns": [
        {
          "match": "\\b(\\d+(\\.\\d+)?)\\b",
          "name": "constant.numeric.espace"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "=",
          "name": "keyword.operator.assignment.espace"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b(\\w+)\\b",
          "name": "variable.other.espace"
        }
      ]
    }
  },
  "scopeName": "source.espace"
}