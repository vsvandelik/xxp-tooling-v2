// Generated from src/language/grammar/ESPACE.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class ESPACELexer extends antlr.Lexer {
    public static readonly SEMICOLON = 1;
    public static readonly ARROW = 2;
    public static readonly CONDITION_ARROW = 3;
    public static readonly LBRACE = 4;
    public static readonly RBRACE = 5;
    public static readonly LPAREN = 6;
    public static readonly RPAREN = 7;
    public static readonly EQUALS = 8;
    public static readonly COMMA = 9;
    public static readonly EXPERIMENT = 10;
    public static readonly SPACE = 11;
    public static readonly OF = 12;
    public static readonly STRATEGY = 13;
    public static readonly PARAM = 14;
    public static readonly ENUM = 15;
    public static readonly RANGE = 16;
    public static readonly CONFIGURE = 17;
    public static readonly TASK = 18;
    public static readonly CONTROL = 19;
    public static readonly CONDITION = 20;
    public static readonly DEFINE = 21;
    public static readonly DATA = 22;
    public static readonly BOOLEAN = 23;
    public static readonly IDENTIFIER = 24;
    public static readonly STRING = 25;
    public static readonly NUMBER = 26;
    public static readonly WS = 27;
    public static readonly COMMENT = 28;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "';'", "'->'", "'-?>'", "'{'", "'}'", "'('", "')'", "'='", 
        "','", "'experiment'", "'space'", "'of'", "'strategy'", "'param'", 
        "'enum'", "'range'", "'configure'", "'task'", "'control'", "'condition'", 
        "'define'", "'data'"
    ];

    public static readonly symbolicNames = [
        null, "SEMICOLON", "ARROW", "CONDITION_ARROW", "LBRACE", "RBRACE", 
        "LPAREN", "RPAREN", "EQUALS", "COMMA", "EXPERIMENT", "SPACE", "OF", 
        "STRATEGY", "PARAM", "ENUM", "RANGE", "CONFIGURE", "TASK", "CONTROL", 
        "CONDITION", "DEFINE", "DATA", "BOOLEAN", "IDENTIFIER", "STRING", 
        "NUMBER", "WS", "COMMENT"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "SEMICOLON", "ARROW", "CONDITION_ARROW", "LBRACE", "RBRACE", "LPAREN", 
        "RPAREN", "EQUALS", "COMMA", "EXPERIMENT", "SPACE", "OF", "STRATEGY", 
        "PARAM", "ENUM", "RANGE", "CONFIGURE", "TASK", "CONTROL", "CONDITION", 
        "DEFINE", "DATA", "LETTER", "DIGIT", "BOOLEAN", "IDENTIFIER", "STRING", 
        "NUMBER", "WS", "COMMENT",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, ESPACELexer._ATN, ESPACELexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "ESPACE.g4"; }

    public get literalNames(): (string | null)[] { return ESPACELexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return ESPACELexer.symbolicNames; }
    public get ruleNames(): string[] { return ESPACELexer.ruleNames; }

    public get serializedATN(): number[] { return ESPACELexer._serializedATN; }

    public get channelNames(): string[] { return ESPACELexer.channelNames; }

    public get modeNames(): string[] { return ESPACELexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,28,236,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,187,8,24,1,
        25,1,25,1,25,5,25,192,8,25,10,25,12,25,195,9,25,1,26,1,26,5,26,199,
        8,26,10,26,12,26,202,9,26,1,26,1,26,1,27,4,27,207,8,27,11,27,12,
        27,208,1,27,1,27,4,27,213,8,27,11,27,12,27,214,3,27,217,8,27,1,28,
        4,28,220,8,28,11,28,12,28,221,1,28,1,28,1,29,1,29,1,29,1,29,5,29,
        230,8,29,10,29,12,29,233,9,29,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,0,47,0,49,23,51,24,53,25,
        55,26,57,27,59,28,1,0,5,3,0,65,90,95,95,97,122,1,0,48,57,1,0,34,
        34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,242,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,66,1,0,0,0,7,70,1,0,0,
        0,9,72,1,0,0,0,11,74,1,0,0,0,13,76,1,0,0,0,15,78,1,0,0,0,17,80,1,
        0,0,0,19,82,1,0,0,0,21,93,1,0,0,0,23,99,1,0,0,0,25,102,1,0,0,0,27,
        111,1,0,0,0,29,117,1,0,0,0,31,122,1,0,0,0,33,128,1,0,0,0,35,138,
        1,0,0,0,37,143,1,0,0,0,39,151,1,0,0,0,41,161,1,0,0,0,43,168,1,0,
        0,0,45,173,1,0,0,0,47,175,1,0,0,0,49,186,1,0,0,0,51,188,1,0,0,0,
        53,196,1,0,0,0,55,206,1,0,0,0,57,219,1,0,0,0,59,225,1,0,0,0,61,62,
        5,59,0,0,62,2,1,0,0,0,63,64,5,45,0,0,64,65,5,62,0,0,65,4,1,0,0,0,
        66,67,5,45,0,0,67,68,5,63,0,0,68,69,5,62,0,0,69,6,1,0,0,0,70,71,
        5,123,0,0,71,8,1,0,0,0,72,73,5,125,0,0,73,10,1,0,0,0,74,75,5,40,
        0,0,75,12,1,0,0,0,76,77,5,41,0,0,77,14,1,0,0,0,78,79,5,61,0,0,79,
        16,1,0,0,0,80,81,5,44,0,0,81,18,1,0,0,0,82,83,5,101,0,0,83,84,5,
        120,0,0,84,85,5,112,0,0,85,86,5,101,0,0,86,87,5,114,0,0,87,88,5,
        105,0,0,88,89,5,109,0,0,89,90,5,101,0,0,90,91,5,110,0,0,91,92,5,
        116,0,0,92,20,1,0,0,0,93,94,5,115,0,0,94,95,5,112,0,0,95,96,5,97,
        0,0,96,97,5,99,0,0,97,98,5,101,0,0,98,22,1,0,0,0,99,100,5,111,0,
        0,100,101,5,102,0,0,101,24,1,0,0,0,102,103,5,115,0,0,103,104,5,116,
        0,0,104,105,5,114,0,0,105,106,5,97,0,0,106,107,5,116,0,0,107,108,
        5,101,0,0,108,109,5,103,0,0,109,110,5,121,0,0,110,26,1,0,0,0,111,
        112,5,112,0,0,112,113,5,97,0,0,113,114,5,114,0,0,114,115,5,97,0,
        0,115,116,5,109,0,0,116,28,1,0,0,0,117,118,5,101,0,0,118,119,5,110,
        0,0,119,120,5,117,0,0,120,121,5,109,0,0,121,30,1,0,0,0,122,123,5,
        114,0,0,123,124,5,97,0,0,124,125,5,110,0,0,125,126,5,103,0,0,126,
        127,5,101,0,0,127,32,1,0,0,0,128,129,5,99,0,0,129,130,5,111,0,0,
        130,131,5,110,0,0,131,132,5,102,0,0,132,133,5,105,0,0,133,134,5,
        103,0,0,134,135,5,117,0,0,135,136,5,114,0,0,136,137,5,101,0,0,137,
        34,1,0,0,0,138,139,5,116,0,0,139,140,5,97,0,0,140,141,5,115,0,0,
        141,142,5,107,0,0,142,36,1,0,0,0,143,144,5,99,0,0,144,145,5,111,
        0,0,145,146,5,110,0,0,146,147,5,116,0,0,147,148,5,114,0,0,148,149,
        5,111,0,0,149,150,5,108,0,0,150,38,1,0,0,0,151,152,5,99,0,0,152,
        153,5,111,0,0,153,154,5,110,0,0,154,155,5,100,0,0,155,156,5,105,
        0,0,156,157,5,116,0,0,157,158,5,105,0,0,158,159,5,111,0,0,159,160,
        5,110,0,0,160,40,1,0,0,0,161,162,5,100,0,0,162,163,5,101,0,0,163,
        164,5,102,0,0,164,165,5,105,0,0,165,166,5,110,0,0,166,167,5,101,
        0,0,167,42,1,0,0,0,168,169,5,100,0,0,169,170,5,97,0,0,170,171,5,
        116,0,0,171,172,5,97,0,0,172,44,1,0,0,0,173,174,7,0,0,0,174,46,1,
        0,0,0,175,176,7,1,0,0,176,48,1,0,0,0,177,178,5,116,0,0,178,179,5,
        114,0,0,179,180,5,117,0,0,180,187,5,101,0,0,181,182,5,102,0,0,182,
        183,5,97,0,0,183,184,5,108,0,0,184,185,5,115,0,0,185,187,5,101,0,
        0,186,177,1,0,0,0,186,181,1,0,0,0,187,50,1,0,0,0,188,193,3,45,22,
        0,189,192,3,45,22,0,190,192,3,47,23,0,191,189,1,0,0,0,191,190,1,
        0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,52,1,0,
        0,0,195,193,1,0,0,0,196,200,5,34,0,0,197,199,8,2,0,0,198,197,1,0,
        0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,
        0,0,202,200,1,0,0,0,203,204,5,34,0,0,204,54,1,0,0,0,205,207,3,47,
        23,0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,
        0,0,209,216,1,0,0,0,210,212,5,46,0,0,211,213,3,47,23,0,212,211,1,
        0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,
        0,0,0,216,210,1,0,0,0,216,217,1,0,0,0,217,56,1,0,0,0,218,220,7,3,
        0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,
        0,0,222,223,1,0,0,0,223,224,6,28,0,0,224,58,1,0,0,0,225,226,5,47,
        0,0,226,227,5,47,0,0,227,231,1,0,0,0,228,230,8,4,0,0,229,228,1,0,
        0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,
        0,0,233,231,1,0,0,0,234,235,6,29,0,0,235,60,1,0,0,0,10,0,186,191,
        193,200,208,214,216,221,231,1,0,1,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!ESPACELexer.__ATN) {
            ESPACELexer.__ATN = new antlr.ATNDeserializer().deserialize(ESPACELexer._serializedATN);
        }

        return ESPACELexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(ESPACELexer.literalNames, ESPACELexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return ESPACELexer.vocabulary;
    }

    private static readonly decisionsToDFA = ESPACELexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}