// Generated from src/language/grammar/ESPACE.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class ESPACELexer extends antlr.Lexer {
    public static readonly SEMICOLON = 1;
    public static readonly ARROW = 2;
    public static readonly CONDITION_ARROW = 3;
    public static readonly LBRACE = 4;
    public static readonly RBRACE = 5;
    public static readonly LPAREN = 6;
    public static readonly RPAREN = 7;
    public static readonly EQUALS = 8;
    public static readonly COMMA = 9;
    public static readonly EXPERIMENT = 10;
    public static readonly SPACE = 11;
    public static readonly OF = 12;
    public static readonly STRATEGY = 13;
    public static readonly PARAM = 14;
    public static readonly ENUM = 15;
    public static readonly RANGE = 16;
    public static readonly CONFIGURE = 17;
    public static readonly TASK = 18;
    public static readonly CONTROL = 19;
    public static readonly CONDITION = 20;
    public static readonly DEFINE = 21;
    public static readonly DATA = 22;
    public static readonly START = 23;
    public static readonly END = 24;
    public static readonly RANDOM = 25;
    public static readonly GRIDSEARCH = 26;
    public static readonly BOOLEAN = 27;
    public static readonly IDENTIFIER = 28;
    public static readonly STRING = 29;
    public static readonly NUMBER = 30;
    public static readonly WS = 31;
    public static readonly COMMENT = 32;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "';'", "'->'", "'-?>'", "'{'", "'}'", "'('", "')'", "'='", 
        "','", "'experiment'", "'space'", "'of'", "'strategy'", "'param'", 
        "'enum'", "'range'", "'configure'", "'task'", "'control'", "'condition'", 
        "'define'", "'data'", "'start'", "'end'", "'random'", "'gridsearch'"
    ];

    public static readonly symbolicNames = [
        null, "SEMICOLON", "ARROW", "CONDITION_ARROW", "LBRACE", "RBRACE", 
        "LPAREN", "RPAREN", "EQUALS", "COMMA", "EXPERIMENT", "SPACE", "OF", 
        "STRATEGY", "PARAM", "ENUM", "RANGE", "CONFIGURE", "TASK", "CONTROL", 
        "CONDITION", "DEFINE", "DATA", "START", "END", "RANDOM", "GRIDSEARCH", 
        "BOOLEAN", "IDENTIFIER", "STRING", "NUMBER", "WS", "COMMENT"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "SEMICOLON", "ARROW", "CONDITION_ARROW", "LBRACE", "RBRACE", "LPAREN", 
        "RPAREN", "EQUALS", "COMMA", "EXPERIMENT", "SPACE", "OF", "STRATEGY", 
        "PARAM", "ENUM", "RANGE", "CONFIGURE", "TASK", "CONTROL", "CONDITION", 
        "DEFINE", "DATA", "START", "END", "RANDOM", "GRIDSEARCH", "LETTER", 
        "DIGIT", "BOOLEAN", "IDENTIFIER", "STRING", "NUMBER", "WS", "COMMENT",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, ESPACELexer._ATN, ESPACELexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "ESPACE.g4"; }

    public get literalNames(): (string | null)[] { return ESPACELexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return ESPACELexer.symbolicNames; }
    public get ruleNames(): string[] { return ESPACELexer.ruleNames; }

    public get serializedATN(): number[] { return ESPACELexer._serializedATN; }

    public get channelNames(): string[] { return ESPACELexer.channelNames; }

    public get modeNames(): string[] { return ESPACELexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,32,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
        23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,223,8,28,1,29,1,29,1,29,5,
        29,228,8,29,10,29,12,29,231,9,29,1,30,1,30,5,30,235,8,30,10,30,12,
        30,238,9,30,1,30,1,30,1,31,4,31,243,8,31,11,31,12,31,244,1,31,1,
        31,4,31,249,8,31,11,31,12,31,250,3,31,253,8,31,1,32,4,32,256,8,32,
        11,32,12,32,257,1,32,1,32,1,33,1,33,1,33,1,33,5,33,266,8,33,10,33,
        12,33,269,9,33,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,0,55,0,57,27,59,
        28,61,29,63,30,65,31,67,32,1,0,5,3,0,65,90,95,95,97,122,1,0,48,57,
        1,0,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,278,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,74,1,0,0,0,7,78,1,0,0,0,9,80,
        1,0,0,0,11,82,1,0,0,0,13,84,1,0,0,0,15,86,1,0,0,0,17,88,1,0,0,0,
        19,90,1,0,0,0,21,101,1,0,0,0,23,107,1,0,0,0,25,110,1,0,0,0,27,119,
        1,0,0,0,29,125,1,0,0,0,31,130,1,0,0,0,33,136,1,0,0,0,35,146,1,0,
        0,0,37,151,1,0,0,0,39,159,1,0,0,0,41,169,1,0,0,0,43,176,1,0,0,0,
        45,181,1,0,0,0,47,187,1,0,0,0,49,191,1,0,0,0,51,198,1,0,0,0,53,209,
        1,0,0,0,55,211,1,0,0,0,57,222,1,0,0,0,59,224,1,0,0,0,61,232,1,0,
        0,0,63,242,1,0,0,0,65,255,1,0,0,0,67,261,1,0,0,0,69,70,5,59,0,0,
        70,2,1,0,0,0,71,72,5,45,0,0,72,73,5,62,0,0,73,4,1,0,0,0,74,75,5,
        45,0,0,75,76,5,63,0,0,76,77,5,62,0,0,77,6,1,0,0,0,78,79,5,123,0,
        0,79,8,1,0,0,0,80,81,5,125,0,0,81,10,1,0,0,0,82,83,5,40,0,0,83,12,
        1,0,0,0,84,85,5,41,0,0,85,14,1,0,0,0,86,87,5,61,0,0,87,16,1,0,0,
        0,88,89,5,44,0,0,89,18,1,0,0,0,90,91,5,101,0,0,91,92,5,120,0,0,92,
        93,5,112,0,0,93,94,5,101,0,0,94,95,5,114,0,0,95,96,5,105,0,0,96,
        97,5,109,0,0,97,98,5,101,0,0,98,99,5,110,0,0,99,100,5,116,0,0,100,
        20,1,0,0,0,101,102,5,115,0,0,102,103,5,112,0,0,103,104,5,97,0,0,
        104,105,5,99,0,0,105,106,5,101,0,0,106,22,1,0,0,0,107,108,5,111,
        0,0,108,109,5,102,0,0,109,24,1,0,0,0,110,111,5,115,0,0,111,112,5,
        116,0,0,112,113,5,114,0,0,113,114,5,97,0,0,114,115,5,116,0,0,115,
        116,5,101,0,0,116,117,5,103,0,0,117,118,5,121,0,0,118,26,1,0,0,0,
        119,120,5,112,0,0,120,121,5,97,0,0,121,122,5,114,0,0,122,123,5,97,
        0,0,123,124,5,109,0,0,124,28,1,0,0,0,125,126,5,101,0,0,126,127,5,
        110,0,0,127,128,5,117,0,0,128,129,5,109,0,0,129,30,1,0,0,0,130,131,
        5,114,0,0,131,132,5,97,0,0,132,133,5,110,0,0,133,134,5,103,0,0,134,
        135,5,101,0,0,135,32,1,0,0,0,136,137,5,99,0,0,137,138,5,111,0,0,
        138,139,5,110,0,0,139,140,5,102,0,0,140,141,5,105,0,0,141,142,5,
        103,0,0,142,143,5,117,0,0,143,144,5,114,0,0,144,145,5,101,0,0,145,
        34,1,0,0,0,146,147,5,116,0,0,147,148,5,97,0,0,148,149,5,115,0,0,
        149,150,5,107,0,0,150,36,1,0,0,0,151,152,5,99,0,0,152,153,5,111,
        0,0,153,154,5,110,0,0,154,155,5,116,0,0,155,156,5,114,0,0,156,157,
        5,111,0,0,157,158,5,108,0,0,158,38,1,0,0,0,159,160,5,99,0,0,160,
        161,5,111,0,0,161,162,5,110,0,0,162,163,5,100,0,0,163,164,5,105,
        0,0,164,165,5,116,0,0,165,166,5,105,0,0,166,167,5,111,0,0,167,168,
        5,110,0,0,168,40,1,0,0,0,169,170,5,100,0,0,170,171,5,101,0,0,171,
        172,5,102,0,0,172,173,5,105,0,0,173,174,5,110,0,0,174,175,5,101,
        0,0,175,42,1,0,0,0,176,177,5,100,0,0,177,178,5,97,0,0,178,179,5,
        116,0,0,179,180,5,97,0,0,180,44,1,0,0,0,181,182,5,115,0,0,182,183,
        5,116,0,0,183,184,5,97,0,0,184,185,5,114,0,0,185,186,5,116,0,0,186,
        46,1,0,0,0,187,188,5,101,0,0,188,189,5,110,0,0,189,190,5,100,0,0,
        190,48,1,0,0,0,191,192,5,114,0,0,192,193,5,97,0,0,193,194,5,110,
        0,0,194,195,5,100,0,0,195,196,5,111,0,0,196,197,5,109,0,0,197,50,
        1,0,0,0,198,199,5,103,0,0,199,200,5,114,0,0,200,201,5,105,0,0,201,
        202,5,100,0,0,202,203,5,115,0,0,203,204,5,101,0,0,204,205,5,97,0,
        0,205,206,5,114,0,0,206,207,5,99,0,0,207,208,5,104,0,0,208,52,1,
        0,0,0,209,210,7,0,0,0,210,54,1,0,0,0,211,212,7,1,0,0,212,56,1,0,
        0,0,213,214,5,116,0,0,214,215,5,114,0,0,215,216,5,117,0,0,216,223,
        5,101,0,0,217,218,5,102,0,0,218,219,5,97,0,0,219,220,5,108,0,0,220,
        221,5,115,0,0,221,223,5,101,0,0,222,213,1,0,0,0,222,217,1,0,0,0,
        223,58,1,0,0,0,224,229,3,53,26,0,225,228,3,53,26,0,226,228,3,55,
        27,0,227,225,1,0,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,
        0,0,229,230,1,0,0,0,230,60,1,0,0,0,231,229,1,0,0,0,232,236,5,34,
        0,0,233,235,8,2,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,
        0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,5,34,
        0,0,240,62,1,0,0,0,241,243,3,55,27,0,242,241,1,0,0,0,243,244,1,0,
        0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,252,1,0,0,0,246,248,5,46,
        0,0,247,249,3,55,27,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,
        0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,246,1,0,0,0,252,253,1,
        0,0,0,253,64,1,0,0,0,254,256,7,3,0,0,255,254,1,0,0,0,256,257,1,0,
        0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,6,32,
        0,0,260,66,1,0,0,0,261,262,5,47,0,0,262,263,5,47,0,0,263,267,1,0,
        0,0,264,266,8,4,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,
        0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,6,33,
        0,0,271,68,1,0,0,0,10,0,222,227,229,236,244,250,252,257,267,1,0,
        1,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!ESPACELexer.__ATN) {
            ESPACELexer.__ATN = new antlr.ATNDeserializer().deserialize(ESPACELexer._serializedATN);
        }

        return ESPACELexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(ESPACELexer.literalNames, ESPACELexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return ESPACELexer.vocabulary;
    }

    private static readonly decisionsToDFA = ESPACELexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}