/**
 * Type definitions for experiment artifacts.
 * Defines the structure of parsed experiment artifacts generated by the artifact generator.
 */

/**
 * Union type for all possible parameter and expression values in experiments.
 */
export type Expression = string | number | boolean;

/**
 * Represents a single task definition within an experiment artifact.
 * Contains all information needed to execute a specific task.
 */
export interface Task {
  /** Unique identifier for the task within the experiment */
  taskId: string;
  /** Name of the workflow this task belongs to */
  workflow: string;
  /** Path to the task implementation file */
  implementation: string;
  /** Parameters that vary across experiment runs */
  dynamicParameters: string[];
  /** Parameters with fixed values */
  staticParameters: Record<string, Expression>;
  /** Data inputs required by this task */
  inputData: string[];
  /** Data outputs produced by this task */
  outputData: string[];
}

/**
 * Represents a set of parameter values for a single experiment run.
 */
export interface ParameterSet {
  /** Mapping of parameter names to their values */
  [key: string]: Expression;
}

/**
 * Represents a parameter space within an experiment.
 * Defines task execution order and parameter value combinations.
 */
export interface Space {
  /** Unique identifier for the space */
  spaceId: string;
  /** Ordered list of task IDs to execute in this space */
  tasksOrder: string[];
  /** Array of parameter value combinations for this space */
  parameters: ParameterSet[];
  /** Space-specific input data definitions */
  inputData?: Record<string, string>;
}

/**
 * Represents a transition in the experiment control flow.
 */
export interface Transition {
  /** Source space ID or 'START' */
  from: string;
  /** Target space ID or 'END' */
  to: string;
  /** Optional condition for conditional transitions */
  condition?: string;
}

/**
 * Defines the control flow for experiment execution.
 * Specifies how execution moves between parameter spaces.
 */
export interface Control {
  /** Initial space ID to start experiment execution */
  START: string;
  /** Array of transitions between spaces */
  transitions: Transition[];
}

/**
 * Root interface representing a complete experiment artifact.
 * Contains all information needed to execute an experiment.
 */
export interface Artifact {
  /** Name of the experiment */
  experiment: string;
  /** Version of the experiment */
  version: string;
  /** Array of task groups (tasks within a group can be executed in parallel) */
  tasks: Task[][];
  /** Array of parameter spaces to execute */
  spaces: Space[];
  /** Control flow definition for experiment execution */
  control: Control;
  /** Global input data definitions */
  inputData?: Record<string, string>;
}
